// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  events        Event[]
  repositories  Repository[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Event {
  id              String     @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  startTime       String
  endTime         String
  date            String
  color           String
  description     String?
  isCompleted     Boolean    @default(false)
  githubRepo      String?
  codeLanguage    String?
  priority        String?
  reminderTime    Int?
  notificationSent Boolean    @default(false)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  githubIssueId   String?
  githubIssueUrl  String?
  repositoryId    String?     @db.ObjectId
  repository      Repository? @relation(fields: [repositoryId], references: [id], onDelete: SetNull)
  userId          String?     @db.ObjectId
  user            User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
}

model Repository {
  id              String     @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  fullName        String     @unique
  description     String?
  url             String
  lastUpdated     DateTime
  openIssuesCount Int        @default(0)
  language        String?
  isActive        Boolean    @default(true)
  lastSynced      DateTime   @default(now())
  events          Event[]
  userId          String     @db.ObjectId
  user            User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

